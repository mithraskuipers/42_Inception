################################################################################
# Download Debian
################################################################################

https://cdimage.debian.org/debian-cd/current/amd64/iso-cd/debian-11.6.0-amd64-netinst.iso

################################################################################
# Install the virtual machine
################################################################################

[New]
Name: Debian 
Machine Folder: /sgoinfre/mikuiper/Inception/VirtualBox VMs
Type: Linux
Version: Debian 64-bit
[Continue]
Memory size: 5120 MB
[Continue]
Create a virtual hard disk now
[Create]
VDI
Dynamically allocated
20 GB
[Create]
Right click on "Debian" -> Settings > Storage
Click on the disk icon with the text "Empty"
Click on the disc icon on the right side.
Choose a disk file...
Browse to your Debian install iso.
Click on it and press [Open]
[OK]
[Start]
A new small virtual machine window will pop up.
Before we continue, let's make the window bigger by going to: View -> Virtual Screen 1 -> Scale to 300%
[Graphical install]
[Continue] x3
Keep the hostname as "debian"
[Continue]
Keep the Domain name empty.
[Continue]
Root password: tijdelijk
[Continue]
Full name for the new user: mikuiper
[Continue]
Username for your account: mikuiper
[Continue]
Password: tijdelijk
[Continue]
[Continue]
Guided - use entire disk
[Continue]
[Continue]
All files in one partition
[Continue]
Finish partitioning and write changes to disk
[Continue]
Select "Yes"
[Continue]
Now it will install the base system. Be patient.
Select "No" when asked "Scan extra installation media?"
[Continue]
[Continue]
[Continue]
Keep the HTTP proxy information empty.
[Continue]
Select "No" when asked "Participate in the package usage survey?"
[Continue]
In the "Software selection" screen, make sure you have only selected:
Debian desktop environment
LXQt
standard system utilities
[Continue]
Now it will install your selected software. Be patient.
The screen can turn to black and stay that way. Just press enter a couple of times.
Finish the installation and reboot.

! DIT IS EEN MOOI MOMENT OM NOG EEN SNAPSHOT TE MAKEN !

################################################################################
Port forwarding on virtual box
On the host
################################################################################

Name	Protocol	HostPort	GuestPort
SSH	TCP					   42			  42
HTTP	TCP					 80				80
HTTPS	TCP					443				443

################################################################################
# Install guest additions
################################################################################

With the virtual machine booted, in the virtualbox taskbar:
Devices -> Insert Guest Additions CD image...
cd /media/$USER/VBox_GAs_7.0.6
sudo bash VBoxLinuxAdditions.run
sudo systemctl reboot

################################################################################
# Initial
################################################################################

su -
apt-get update
apt-get upgrade
apt-get install sudo
sudo usermod -aG sudo mikuiper
su mikuiper
groups <- check if added to sudo group

sudo apt-get install nmap
sudo apt-get install neofetch snapd
sudo snap install btop
sudo apt-get install git
sudo apt-get install curl
sudo apt-get install zsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

################################################################################
# Install and configure ssh server
################################################################################

sudo apt-get install openssh-server -y

sudo nano /etc/ssh/sshd_config

Set "Port" to "42"
(This is because port 22 is already occupied by ssh of the host machine)
So now you tell the machine that port 42 should be used for ssh. Not the standard 22.
This also means that in the virtual box port forwardig screen we should use port 42 for the
guest port in the port forwarding entry for ssh.

Set "PermitRootLogin" to "yes"
Set "PubkeyAuthentication" to "no"

sudo systemctl restart ssh
sudo systemctl restart ssh.service

sudo systemctl status ssh
sudo systemctl status ssh.service

! Confirm that it is indeed listening on port 42 !

################################################################################
Configure firewall for ssh and for website
On the VM
################################################################################
sudo apt-get install ufw
sudo ufw enable
sudo ufw allow 42
sudo ufw allow 443
sudo ufw allow 80
sudo ufw status
sudo systemctl reboot

! DIT IS EEN MOOI MOMENT OM NOG EEN SNAPSHOT TE MAKEN !

################################################################################
SSH into the machine
On the host
################################################################################

ssh mikuiper@127.0.0.1 -p 42
ssh mikuiper@localhost -p 42

! VOOR HET GEMAK KUN JE NU VERBINDEN VIA SSH. GAAT SNEL SNELLER!!! !
Als je niet kunt verbinden, controleer even of je in virtual box wel de juiste port forwarding hebt gedaan.
Host Port 42, maar ook Guest Port 42.

################################################################################
# Connection method 1: Connect via SSH from terminal
################################################################################

export intraname=mikuiper

ssh-keygen -f "/home/$USER/.ssh/known_hosts" -R "[127.0.0.1]:42"
ssh mikuiper@127.0.0.1 -p 42

################################################################################
# Connection method 2: Connect via SSH via VSCODE
################################################################################

F1 > Remote-SSH: Connect to Host...
ssh mikuiper@127.0.0.1 -p 42

This will initialize the VS Code Server

################################################################################
# Install Docker
################################################################################

sudo apt-get update
sudo apt-get upgrade -y
sudo apt install docker.io

sudo systemctl status docker
sudo docker run hello-world

sudo usermod -aG docker $USER
logout
Log back in
groups
(to check if you are added to the "docker" group)

################################################################################
# Install Docker Compose
################################################################################


sudo apt-get update
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
sudo mkdir -m 0755 -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt-get install docker-compose
sudo apt-get install docker-compose-plugin
REBOOT?

################################################################################
Test your own webserver
################################################################################

git clone https://github.com/mithraskuipers/docker_nginx_test.git ~/docker_nginx_test
cd ~/docker_nginx_test
sudo docker-compose up -d
Test the nginx webserver by opening up a browser and going to localhost or http://127.0.0.1

If you do not get to see a webpage with a positive message, something went wrong.
It means that you might not have opened the ports correctly, or that port 80 is busy with something on the host machine.

################################################################################
# Create folder structure conform the subject
################################################################################

Browse to the location where you want the inception project to be stored.

# Set the temporary intraname env variable
export intraname=mikuiper

Then run:

# Create folder and file structure
mkdir /home/$USER/inception
touch /home/$USER/inception/Makefile
mkdir /home/$USER/inception/srcs
touch /home/$USER/inception/srcs/.env
touch /home/$USER/inception/srcs/docker-compose.yml
mkdir -p /home/$USER/inception/srcs/requirements/mariadb/conf
touch /home/$USER/inception/srcs/requirements/mariadb/Dockerfile
touch /home/$USER/inception/srcs/requirements/mariadb/conf/create_db.sh
mkdir -p /home/$USER/inception/srcs/requirements/nginx/conf
touch /home/$USER/inception/srcs/requirements/nginx/Dockerfile
touch /home/$USER/inception/srcs/requirements/nginx/conf/nginx.conf
mkdir -p /home/$USER/inception/srcs/requirements/wordpress/conf
touch /home/$USER/inception/srcs/requirements/wordpress/Dockerfile
touch /home/$USER/inception/srcs/requirements/wordpress/conf/wp-config-create.sh
touch /home/$USER/inception/srcs/requirements/mariadb/.dockerignore
touch /home/$USER/inception/srcs/requirements/wordpress/.dockerignore
mkdir -p /home/$USER/inception/srcs/requirements/mariadb/tools
touch /home/$USER/inception/srcs/requirements/mariadb/tools/.gitkeep
mkdir -p /home/$USER/inception/srcs/requirements/wordpress/tools
touch /home/$USER/inception/srcs/requirements/wordpress/tools/.gitkeep

# Populate the files
sudo nano ~/inception/srcs/.env

# ORIGINAL (WORKS!)
DOMAIN_NAME=mikuiper.42.fr
CERT_=./requirements/tools/mikuiper.42.fr.crt
KEY_=./requirements/tools/mikuiper.42.fr.key
MARIADB_DB_NAME=wordpress
MARIADB_ROOT_PASS=rootpass
MARIADB_USERNAME=wpuser
MARIADB_USERPASS=wppass

sudo nano ~/inception/srcs/requirements/wordpress/.dockerignore
.git
.env

sudo nano ~/inception/srcs/requirements/mariadb/.dockerignore
.git
.env

################################################################################
# 
################################################################################

# Change the local domain
echo "127.0.0.1 $USER.42.fr localhost" | sudo tee -a /etc/hosts
echo "127.0.0.1 $USER.42.fr:80" | sudo tee -a /etc/hosts

# Now test it out
http://mikuiper.42.fr

# Test your new domain
#Go to the cloned docker_nginx_test repository and run

sudo docker-compose down
sudo docker-compose up -d

# Install a self-signed ssl certificate
sudo apt update -y
sudo apt install -y wget




Cd

Create a private key for the CA:
openssl genrsa -out ca.key 4096

Create a self-signed root certificate for the CA:
openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out ca.crt -subj "/C=FR/ST=Ile-de-France/L=Paris/O=Mikuiper/CN=mikuiper.42.fr"

Create a private key for the domain:
openssl genrsa -out mikuiper.42.fr.key 2048

Create a CSR for the domain:
openssl req -new -key mikuiper.42.fr.key -out mikuiper.42.fr.csr -subj "/C=FR/ST=Ile-de-France/L=Paris/O=Mikuiper/CN=mikuiper.42.fr"

Sign the CSR with the CA:
openssl x509 -req -in mikuiper.42.fr.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out mikuiper.42.fr.crt -days 500 -sha256

mv ca.crt "$USER".42.fr.crt
mv ca.key "$USER".42.fr.key







################################################################################
# Change docker_nginx_test nginx conf for HTTPS
################################################################################

'''
This is a configuration file for an nginx server.
It contains settings that define how the server should respond to incoming
requests. It configures an nginx server with SSL to listen to both HTTP and 
HTTPS ports.
'''

sudo nano ~/docker_nginx_test/nginx/conf.d/nginx.conf

Replace its contents with the following code.

'''
server {
    # Listen on port http
    listen 80;

    # Listen on port https - ssl
    listen 443 ssl;

    # Set the domain
    server_name mikuiper.42.fr www.mikuiper.42.fr;

    # Root directory of the project
    root /var/www/public/html;

    # Path to the certificate and key:
    ssl_certificate /etc/nginx/ssl/mikuiper.42.fr.crt;
    ssl_certificate_key /etc/nginx/ssl/mikuiper.42.fr.key;

    # Supported TLS protocols
    ssl_protocols TLSv1.2 TLSv1.3;

    # Caching options and timeouts:
    ssl_session_timeout 10m;
    keepalive_timeout 70;

    # If user requests file that does not exist, give instead..
    location / {
        try_files $uri /index.html;
    }
}
'''

################################################################################
Update docker_nginx_test docker-compose.yml
################################################################################

'''
We now add an extra entry to the volumes section, namely:
- /home/mikuiper/inception/srcs/requirements/tools:/etc/nginx/ssl/
The volume section will now specify 3 separate volume mounts, where each
maps a directory on the host machine to a directory inside the nginx container.
Now we have mapped the [..]/tools directory on the virtual machine to the
/etc/nginx/ssl directory of the container.

This allows the nginx server to serve HTTPS content because the nginx server
now has access to the SSL certificate and keyfiles.
'''

cd ~/docker_nginx_test/
sudo docker-compose down
sudo nano docker-compose.yml

Replace everything with the following:

'''
version: '3'

services:
  nginx:
    # On which Docker image should the service be based
    image: nginx:stable-alpine
	# Maps host directory with container directory
    volumes:
      - ./public:/var/www/public/
      - ./nginx/conf.d:/etc/nginx/conf.d/
      - /home/mikuiper/inception/srcs/requirements/tools:/etc/nginx/ssl/
    restart: unless-stopped
	# Maps the host port with the container port 
    ports:
      - "80:80"
      - "443:443"
    container_name: docker_nginx_test
'''

Save it.

################################################################################
Test! Check if your nginx server can serve HTTPS content
################################################################################

cd ~/docker_nginx_test/
docker-compose up -d

Test it.
Go to:
https://mikuiper.42.fr/
For Firefox users: The page should show you "Warning: Potential Security Risk Ahead"
Click on the on button "Advanced", followed by "Accept the Risk and Continue"

Now the browser trusts the certificate we created. Our site is now also loaded via ssl.
Yet, our connection is still not considered to be secure. But that is none of our problems!

################################################################################
INCEPTION START
################################################################################
################################################################################
Inception Makefile
################################################################################

sudo nano ~/inception/Makefile

'''
name = inception
all:
	@printf "Launch configuration ${name}...\n"
	@docker-compose -f ./docker-compose.yml up -d

build:
	@printf "Building configuration ${name}...\n"
	@docker-compose -f ./docker-compose.yml up -d --build

down:
	@printf "Stopping configuration ${name}...\n"
	@docker-compose -f ./docker-compose.yml down

re:	down
	@printf "Rebuild configuration ${name}...\n"
	@docker-compose -f ./docker-compose.yml up -d --build

clean: down
	@printf "Cleaning configuration ${name}...\n"
	@docker system prune -a

fclean:
	@printf "Total clean of all configurations docker\n"
	@docker stop $$(docker ps -qa)
	@docker system prune --all --force --volumes
	@docker network prune --force
	@docker volume prune --force

.PHONY	: all build down re clean fclean
'''

Save it.

################################################################################
Inception nginx server
################################################################################

'''
We will now configure our Inception nginx server.
We can use a similar configuration as the nginx configuration we used before.

But there are some differences:
1. For Inception we need to configure nginx such that requests to 
https://mikuiper.42.fr and https://www.mikuiper.42.fr are served from the 
/var/www directory.

2. Also, since WordPress makes use of PHP, we explicitly tell nginx to give PHP 
files precedence over HTML files.

3. According to the subject, the server should only serve HTTPS content.
This means that we do not need the HTTP port (i.e. 80) anymore.

4. Port 9000 is the port of our PHP-FMP, used for connecting PHP with nginx.
'''

sudo nano ~/inception/srcs/requirements/nginx/conf/nginx.conf

Replace contents with the following code:

'''
server {
    listen      443 ssl;
    server_name  mikuiper.42.fr www.mikuiper.42.fr;
    root    /var/www/;
    index index.php;
    ssl_certificate     /etc/nginx/ssl/mikuiper.42.fr.crt;
    ssl_certificate_key /etc/nginx/ssl/mikuiper.42.fr.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_session_timeout 10m;
    keepalive_timeout 70;
    location / {
        try_files $uri /index.php?$args;
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache';
        if_modified_since off;
        expires off;
        etag off;
    }
    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass wordpress:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}
'''

cp ~/inception/srcs/requirements/tools/* ~/inception/srcs/requirements/nginx/tools/



################################################################################

################################################################################


sudo nano ~/inception/srcs/requirements/nginx/Dockerfile

'''
FROM alpine:3.16
RUN	apk update && apk upgrade && apk add --no-cache nginx
EXPOSE 443
CMD ["nginx", "-g", "daemon off;"]

'''

################################################################################

################################################################################

sudo nano ~/inception/srcs/docker-compose.yml

'''
version: '3'

services:
  nginx:
    build:
      context: .
      dockerfile: requirements/nginx/Dockerfile
    container_name: nginx
    depends_on:
      - wordpress
    ports:
      - "443:443"
    networks:
      - inception
    volumes:
      - ./requirements/nginx/conf/:/etc/nginx/http.d/
      - ./requirements/nginx/tools:/etc/nginx/ssl/
      - wp-volume:/var/www/
    restart: always

  mariadb:
    build:
      context: .
      dockerfile: requirements/mariadb/Dockerfile
      args:
        MARIADB_DB_NAME: ${MARIADB_DB_NAME}
        MARIADB_USERNAME: ${MARIADB_USERNAME}
        MARIADB_USERPASS: ${MARIADB_USERPASS}
        MARIADB_ROOT_PASS: ${MARIADB_ROOT_PASS}
    container_name: mariadb
    ports:
      - "3306:3306"
    networks:
      - inception
    restart: always

  wordpress:
    build:
      context: .
      dockerfile: requirements/wordpress/Dockerfile
      args:
        MARIADB_DB_NAME: ${MARIADB_DB_NAME}
        MARIADB_USERNAME: ${MARIADB_USERNAME}
        MARIADB_USERPASS: ${MARIADB_USERPASS}
    container_name: wordpress
    depends_on:
      - mariadb
    restart: always
    networks:
      - inception
    volumes:
      - wp-volume:/var/www/

volumes:
  wp-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/mikuiper/data/wordpress

  db-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/mikuiper/data/mariadb

networks:
    inception:
        driver: bridge


'''

Save it.

Turn off the test nginx container.

cd ~/docker_nginx_test
docker-compose down

cd ~/inception/srcs
docker-compose up -d


################################################################################
Test!
################################################################################

Remember we used port 443, which only allows for HTTPS
https://127.0.0.1
https://mikuiper.42.fr

################################################################################
Inception mariadb
################################################################################

sudo nano ~/inception/srcs/requirements/mariadb/Dockerfile

'''
FROM alpine:3.16

ARG MARIADB_DB_NAME \
    MARIADB_USERNAME \
    MARIADB_USERPASS

RUN apk update && apk add --no-cache mariadb mariadb-client

RUN mkdir /var/run/mysqld; \
    chmod 777 /var/run/mysqld; \
    { echo '[mysqld]'; \
      echo 'skip-host-cache'; \
      echo 'skip-name-resolve'; \
      echo 'bind-address=0.0.0.0'; \
    } | tee  /etc/my.cnf.d/docker.cnf; \
    sed -i "s|skip-networking|skip-networking=0|g" \
      /etc/my.cnf.d/mariadb-server.cnf

RUN mysql_install_db --user=mysql --datadir=/var/lib/mysql

EXPOSE 3306

COPY requirements/mariadb/conf/create_db.sh .
RUN sh create_db.sh && rm create_db.sh
USER mysql
CMD ["/usr/bin/mysqld", "--skip-log-error"]

'''

Save it.

################################################################################
Database user creation script
################################################################################


sudo nano ~/inception/srcs/docker-compose.yml

'''

version: '3'

services:
  nginx:
    build:
      context: .
      dockerfile: requirements/nginx/Dockerfile
    container_name: nginx
    depends_on:
      - wordpress
    ports:
      - "443:443"
    networks:
      - inception
    volumes:
      - ./requirements/nginx/conf/:/etc/nginx/http.d/
      - ./requirements/nginx/tools:/etc/nginx/ssl/
      - wp-volume:/var/www/
    restart: always

  mariadb:
    build:
      context: .
      dockerfile: requirements/mariadb/Dockerfile
      args:
        MARIADB_DB_NAME: ${MARIADB_DB_NAME}
        MARIADB_USERNAME: ${MARIADB_USERNAME}
        MARIADB_USERPASS: ${MARIADB_USERPASS}
        MARIADB_ROOT_PASS: ${MARIADB_ROOT_PASS}
    container_name: mariadb
    ports:
      - "3306:3306"
    networks:
      - inception
    restart: always

  wordpress:
    build:
      context: .
      dockerfile: requirements/wordpress/Dockerfile
      args:
        MARIADB_DB_NAME: ${MARIADB_DB_NAME}
        MARIADB_USERNAME: ${MARIADB_USERNAME}
        MARIADB_USERPASS: ${MARIADB_USERPASS}
    container_name: wordpress
    depends_on:
      - mariadb
    restart: always
    networks:
      - inception
    volumes:
      - wp-volume:/var/www/

volumes:
  wp-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/mikuiper/data/wordpress

  db-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/mikuiper/data/mariadb

networks:
    inception:
        driver: bridge


'''

sudo nano ~/inception/srcs/requirements/mariadb/Dockerfile

'''
FROM alpine:3.16

ARG MARIADB_DB_NAME \
    MARIADB_USERNAME \
    MARIADB_USERPASS

RUN apk update && apk add --no-cache mariadb mariadb-client

RUN mkdir /var/run/mysqld; \
    chmod 777 /var/run/mysqld; \
    { echo '[mysqld]'; \
      echo 'skip-host-cache'; \
      echo 'skip-name-resolve'; \
      echo 'bind-address=0.0.0.0'; \
    } | tee  /etc/my.cnf.d/docker.cnf; \
    sed -i "s|skip-networking|skip-networking=0|g" \
      /etc/my.cnf.d/mariadb-server.cnf

RUN mysql_install_db --user=mysql --datadir=/var/lib/mysql

EXPOSE 3306

COPY requirements/mariadb/conf/create_db.sh .
RUN sh create_db.sh && rm create_db.sh
USER mysql
CMD ["/usr/bin/mysqld", "--skip-log-error"]


'''

Save it.

################################################################################
Test!
################################################################################
# NOTE DEZE TEST GAAT MOGELIJK NIET LUKKEN! IK HEB VAN ACHTER NAAR VOOR ALLES UPDATED.
# DE INFO HIERBOVEN KAN DUS VAN TOEPASSING ZIJN OP LATERE STAPPEN.

cd ~/inception/srcs
sudo docker-compose up -d

sudo docker exec -it mariadb mysql -u root

show databases;

################################################################################
Inception WordPress
################################################################################

sudo nano ~/inception/srcs/requirements/wordpress/Dockerfile

'''
FROM alpine:3.16
ARG PHP_VERSION=8 \
    MARIADB_DB_NAME \
    MARIADB_USERNAME \
    MARIADB_USERPASS
RUN apk update && apk upgrade && apk add --no-cache \
    php${PHP_VERSION} \
    php${PHP_VERSION}-fpm \
    php${PHP_VERSION}-mysqli \
    php${PHP_VERSION}-json \
    php${PHP_VERSION}-curl \
    php${PHP_VERSION}-dom \
    php${PHP_VERSION}-exif \
    php${PHP_VERSION}-fileinfo \
    php${PHP_VERSION}-mbstring \
    php${PHP_VERSION}-openssl \
    php${PHP_VERSION}-xml \
    php${PHP_VERSION}-zip \
    php${PHP_VERSION}-redis \
    wget \
    unzip && \
    sed -i "s|listen = 127.0.0.1:9000|listen = 9000|g" \
      /etc/php8/php-fpm.d/www.conf && \
    sed -i "s|;listen.owner = nobody|listen.owner = nobody|g" \
      /etc/php8/php-fpm.d/www.conf && \
    sed -i "s|;listen.group = nobody|listen.group = nobody|g" \
      /etc/php8/php-fpm.d/www.conf && \
    rm -f /var/cache/apk/*
WORKDIR /var/www
RUN wget https://wordpress.org/latest.zip && \
    unzip latest.zip && \
    cp -rf wordpress/* . && \
    rm -rf wordpress latest.zip
COPY ./requirements/wordpress/conf/wp-config-create.sh .
RUN sh wp-config-create.sh && rm wp-config-create.sh && \
    chmod -R 0777 wp-content/
CMD ["/usr/sbin/php-fpm8", "-F"]


'''

Save it.

################################################################################
Inception docker-compose.yml
################################################################################

sudo nano ~/inception/srcs/docker-compose.yml

'''
version: '3'

services:
  nginx:
    build:
      context: .
      dockerfile: requirements/nginx/Dockerfile
    container_name: nginx
    depends_on:
      - wordpress
    ports:
      - "443:443"
    networks:
      - inception
    volumes:
      - ./requirements/nginx/conf/:/etc/nginx/http.d/
      - ./requirements/nginx/tools:/etc/nginx/ssl/
      - wp-volume:/var/www/
    restart: always

  mariadb:
    build:
      context: .
      dockerfile: requirements/mariadb/Dockerfile
      args:
        MARIADB_DB_NAME: ${MARIADB_DB_NAME}
        MARIADB_USERNAME: ${MARIADB_USERNAME}
        MARIADB_USERPASS: ${MARIADB_USERPASS}
        MARIADB_ROOT_PASS: ${MARIADB_ROOT_PASS}
    container_name: mariadb
    ports:
      - "3306:3306"
    networks:
      - inception
    restart: always

  wordpress:
    build:
      context: .
      dockerfile: requirements/wordpress/Dockerfile
      args:
        MARIADB_DB_NAME: ${MARIADB_DB_NAME}
        MARIADB_USERNAME: ${MARIADB_USERNAME}
        MARIADB_USERPASS: ${MARIADB_USERPASS}
    container_name: wordpress
    depends_on:
      - mariadb
    restart: always
    networks:
      - inception
    volumes:
      - wp-volume:/var/www/

volumes:
  wp-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/mikuiper/data/wordpress

  db-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/mikuiper/data/mariadb

networks:
    inception:
        driver: bridge


'''

Save it.

################################################################################
?????
################################################################################

Voeg toe aan Makefile

'''
#!/bin/bash
if [ ! -d "/home/mikuiper/data" ]; then \
        mkdir -p ~/data/mariadb \
        mkdir -p ~/data/wordpress \
fi
'''


sudo chmod +x ~/inception/srcs/requirements/wordpress/tools/make_dir.sh

bash ~/inception/srcs/requirements/wordpress/tools/make_dir.sh

ls ~/data

################################################################################
????
################################################################################

sudo nano ~/inception/srcs/requirements/wordpress/conf/wp-config-create.sh

'''
#!bin/sh
if [ ! -f "/var/www/wp-config.php" ]; then
cat << EOF > /var/www/wp-config.php
<?php
define( 'MARIADB_DB_NAME', '${MARIADB_DB_NAME}' );
define( 'MARIADB_USERNAME', '${MARIADB_USERNAME}' );
define( 'MARIADB_USERPASSWORD', '${MARIADB_USERPASS}' );
define( 'DB_HOST', 'mariadb' );
define( 'DB_CHARSET', 'utf8' );
define( 'DB_COLLATE', '' );
define('FS_METHOD','direct');
\$table_prefix = 'wp_';
define( 'WP_DEBUG', false );
if ( ! defined( 'ABSPATH' ) ) {
define( 'ABSPATH', __DIR__ . '/' );}
define( 'WP_REDIS_HOST', 'redis' );
define( 'WP_REDIS_PORT', 6379 );
define( 'WP_REDIS_TIMEOUT', 1 );
define( 'WP_REDIS_READ_TIMEOUT', 1 );
define( 'WP_REDIS_DATABASE', 0 );
require_once ABSPATH . 'wp-settings.php';
EOF
fi


'''

Save it.

################################################################################
????
################################################################################

sudo nano ~/inception/srcs/requirements/nginx/conf/nginx.conf

'''
server {
    listen      443 ssl;
    server_name  mikuiper.42.fr www.mikuiper.42.fr;
    root    /var/www/;
    index index.php;
    ssl_certificate     /etc/nginx/ssl/mikuiper.42.fr.crt;
    ssl_certificate_key /etc/nginx/ssl/mikuiper.42.fr.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_session_timeout 10m;
    keepalive_timeout 70;
    location / {
        try_files $uri /index.php?$args;
        add_header Last-Modified $date_gmt;
        add_header Cache-Control 'no-store, no-cache';
        if_modified_since off;
        expires off;
        etag off;
    }
    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass wordpress:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}

'''

Save it.


# TEST IT

cd ~/inception/srcs

sudo docker-compose down
sudo docker-compose up -d --build

sudo docker exec -it wordpress ps aux | grep 'php'
sudo docker exec -it wordpress php -v
sudo docker exec -it wordpress php -m

# SETTING UP WORDPRESS

https://127.0.0.1


Site Title: Inception by mikuiper
Username: mikuiper
Password: tijdelijk
Your Email: mikuiper@student.codam.nl
Check: Discourage search engines from indexing this site
[Install WordPress]
[Log In]
[Log In]

# Update the Makefile

name = inception
all:
	@printf "Launch configuration ${name}...\n"
  @bash srcs/requirements/wordpress/tools/make_dir.sh
	@docker-compose -f ./srcs/docker-compose.yml --env-file srcs/.env up -d

build:
	@printf "Building configuration ${name}...\n"
  @bash srcs/requirements/wordpress/tools/make_dir.sh
	@docker-compose -f ./srcs/docker-compose.yml --env-file srcs/.env up -d --build

down:
	@printf "Stopping configuration ${name}...\n"
	@docker-compose -f ./srcs/docker-compose.yml --env-file srcs/.env down

re: down
	@printf "Rebuild configuration ${name}...\n"
	@docker-compose -f ./srcs/docker-compose.yml --env-file srcs/.env up -d --build

clean: down
	@printf "Cleaning configuration ${name}...\n"
	@docker system prune -a
	@sudo rm -rf ~/data/wordpress/*
	@sudo rm -rf ~/data/mariadb/*

fclean:
	@printf "Total clean of all configurations docker\n"
	@docker stop $$(docker ps -qa)
	@docker system prune --all --force --volumes
	@docker network prune --force
	@docker volume prune --force
	@sudo rm -rf ~/data/wordpress/*
	@sudo rm -rf ~/data/mariadb/*

.PHONY	: all build down re clean fclean





make

https://127.0.0.1/wp-admin/install.php


When you site is created you can reach it at:
https://mikuiper.42.fr
The page you get to see is:
~/home/wordpress/index.php



################################################################################
# Check if port is in-use
################################################################################

sudo nmap -p 42 localhost

################################################################################
# Docker commands
################################################################################

# Start Docker container in detached mode
sudo docker-compose up -d

# Stop all running containers
docker stop $(docker ps -aq)

# Remove all containers
docker rm $(docker ps -aq)

# Remove all images
docker rmi $(docker images -q)

# Remove all unused containers/networks/images/volumes
sudo docker system prune --all --volumes

# Kills all running containers and removes all containers
docker ps -aq | xargs docker rm -f
























################################################################################
# Copy over your local Inception folder to virtual machine via SCP
################################################################################

Open a terminal and browse to your Inception directory.
Make sure you are not connected via SSH to the virtual machine.
scp -P 42 -r ~/repos/42_Inception/ mikuiper@127.0.0.1:~

################################################################################
# Docker Compose yaml uitleg
################################################################################

Docker Compose allows you to define and run more than one container
(i.e. multi-container) in your Docker applications. You can save your Docker
Compose configuration settings in a docker-compose.yml file. It defines the
services, networks, and volumes required by your application.

################################################################################
# Prepare for running the Makefile
################################################################################

mkdir -p /home/$USER/docker_container_volumes/wordpress;
mkdir -p /home/$USER/docker_container_volumes/mariadb;

################################################################################
# Run makefile?
################################################################################


################################################################################
# Make Desktop usable
################################################################################

sudo apt-get install firefox

################################################################################
# Running Docker containers + ports
################################################################################

sudo docker ps -a

################################################################################
# Find out the virtual machine's ip address
################################################################################

Look for docker0
ip addr show docker0
