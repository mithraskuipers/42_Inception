# Use a docker-compose file to automate the process of building and running multiple Docker container.
# It allows to define a group of Docker containers as a single service.
# It defines a ‘network’ as ‘bridge’ so that the containers can communicate with eachother. The file specifies the services (containers) for the current application. Defines where to find the Dockerfiles. It also specifies the locations of the Nginx, MariaDB, and WordPress dockerfiles.

# Use version 3 of the Docker Compose syntax
version: '3'

# Define the services (containers) for the application
services:

  # Nginx web server container
  nginx:
    # Build the container from a Dockerfile
    build:
      context: . # Path to the directory containing the files that are needed for building the Docker image. Here it is the current directory.
      dockerfile: requirements/nginx/Dockerfile
    # Name the container
    container_name: nginx
    # Specify that this container depends on the WordPress container
    # Allows you to define the order in which containers are started / stopped when using docker-compose up or docker-compose down commands.
    # The services listed under depends_on are started before the current service.
    depends_on:
      - wordpress
    # Expose the container's port 443 to the host. Standard for HTTPS.
    ports:
      - "443:443"
    # Use the 'inception' network to allow communication between containers
    networks:
      - inception
    # Mount the /nginx/conf/ (configuration files) and /nginx/tools (SSL certificates) into the container.
    # Configuration:
    # - server name
    # - where to find the SSL certificates
    # - the use of FastCGI (req. for comm. between webservers and dynamic web apps).
    # 	- Requires the install. of PHP-FPM (PHP-FastCGI Process Manager) for handling PHP scripts.
    # SSL certificates:
    #	- Eable a secure connection between a client (e.g. webbrowser) and a server (e.g. HTTPS enabled website).
    #	- Contains a digital certificate (issued by a certificate authority) and a keyfile (private key used to decrypt the data that is sent to the server).
    volumes:
      - ./requirements/nginx/conf/:/etc/nginx/http.d/
      - ./requirements/nginx/tools:/etc/nginx/ssl/ # mkcert certificates
      # Mount the WordPress volume into the container
      - wp-volume:/var/www/
    # Restart the container if it stops for any reason
    restart: always

  # MariaDB database container
  # Summary:  Defines build-time arguments (e.g. DB_NAME).
  #           Installs MariaDB and configures /etc/my.cnf.d/.
  #           Runs create_db.sh, which configures a MariaDB container to support a WordPress install.
  mariadb:
    # Build the container from a Dockerfile.
    build:
      context: .
      dockerfile: requirements/mariadb/Dockerfile
      # Pass environment variables to the Dockerfile for configuration
      args:
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
        DB_ROOT: ${DB_ROOT}
    # Name the container
    container_name: mariadb
    # Expose the container's port 3306 to the host. Default for MariaDB communication with clients.
    ports:
      - "3306:3306"
    # Use the 'inception' network to allow communication between containers
    networks:
      - inception
    # Mount the database volume into the container
    volumes:
      - db-volume:/var/lib/mysql
    # Restart the container if it stops for any reason
    restart: always

  # WordPress application container
  wordpress:
    # Build the container from a Dockerfile
    build:
      context: . # Path to the directory containing the files that are needed for building the Docker image. Here it is the current directory.
      dockerfile: requirements/wordpress/Dockerfile
      # Pass environment variables to the Dockerfile for configuration
      args:
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
    # Name the container
    container_name: wordpress
    # Specify that this container depends on the MariaDB container
    # Allows you to define the order in which containers are started / stopped when using docker-compose up or docker-compose down commands.
    # The services listed under depends_on are started before the current service.
    depends_on:
      - mariadb
    # Use the 'inception' network to allow communication between containers
    networks:
      - inception
    # Mount the WordPress volume into the container
    volumes:
      - wp-volume:/var/www/
    # Restart the container if it stops for any reason
    restart: always

# The following section is used to define volumes for WordPress and MariaDB.
# A named volume is a Docker-managed volume that can be mounted by containers.
volumes:
  # WordPress volume
  wp-volume:
    # Use a bind mount to persist data on the host
    # I.e. the data will be stored on the host machine rather than within a Docker-managed volume
    driver_opts:
      o: bind
      type: none
      device: /home/mikuiper/data/wordpress

  # MariaDB volume
  db-volume:
    # Use a bind mount to persist data on the host
    # I.e. the data will be stored on the host machine rather than within a Docker-managed volume
    driver_opts:
      o: bind
      type: none
      device: /home/mikuiper/data/mariadb

# Define the network for the application
networks:
  inception:
    # Use a bridge network to allow communication between containers
    driver: bridge
