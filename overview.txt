├── Makefile
└── srcs
    ├── docker-compose.yml
    │       This Docker Compose file sets up services for WordPress deployment,
    │       including MariaDB for the database, Nginx for the web server with SSL
    │       support and the WordPress service itself. It uses volumes to persist
    │       data for MariaDB and WordPress, and all services are attached to the
    │       "inception" network for communication.
    └── requirements
        ├── mariadb
        │   ├── Dockerfile
        │   │       This code sets up a Docker image based on Debian Buster. It updates
        │   │       the system, installs the MariaDB server and client, copies a script
        │   │       to a temporary directory, makes the script executable, modifies the
        │   │       MariaDB configuration file to allow connections from any IP address,
        │   │       enables network connections, and sets the entrypoint to execute the 
        │   │       script.
        │   └── tools
        │       └── setup_mariadb.sh
        │               This Bash script sets up a MariaDB database by checking if
        │               it's already set up, creating necessary directories,
        │               initializing the database, defining SQL commands, creating
        │               the database and users, granting privileges, and starting
        │               the MariaDB server. If the database is already set up, it
        │               directly starts the server.
        ├── nginx
        │   ├── conf
        │   │   └── nginx.conf
        │   │        This Nginx server configuration block sets up a server with
        │   │        SSL/TLS encryption for the domain "mikuiper.42.fr" on port
        │   │        443. It specifies the root directory as "/var/www/wordpress"
        │   │        and sets "index.php" as the default index file. Requests to
        │   │        the root URL ("/") will attempt to find a matching file and
        │   │        return a 404 error if not found. PHP files will be forwarded
        │   │        to the WordPress service running on port 9000. The configuration
        │   │        includes SSL certificate and key paths, SSL protocols, and
        │   │        fastcgi parameters for PHP execution.
        │   ├── Dockerfile
        │   │        The Dockerfile sets the base image to debian:buster and
        │   │        installs necessary packages including nginx, openssl,
        │   │        curl, and libfcgi0ldbl. It copies the nginx.conf file
        │   │        and start_nginx.sh script to the container, grants
        │   │        permissions to the script, and creates a symlink for
        │   │        the default Nginx configuration. A self-signed SSL
        │   │        certificate is generated using OpenSSL, and port 443
        │   │        is exposed for HTTPS access. The entrypoint is set to
        │   │        execute the start_nginx.sh script. Additionally, the
        │   │        Common Name field in the self-signed certificate is
        │   │        set to "mikuiper.42.fr" using the OpenSSL command with
        │   │        the -subj flag.
        │   └── start_nginx.sh
        │            This Bash script starts the Nginx server with the command
        │            "nginx -g 'daemon off;'", which runs Nginx in the foreground
        │            and keeps the process active.
        └── wordpress
            ├── conf
            │   └── wp-config.php
            │           This PHP script sets up configuration variables for
            │           connecting to a MySQL database in WordPress. It loads
            │           environment variables from a .env file using the .env
            │           library. It defines the database name, username,
            │           password, host, character set, and table prefix.
            │           It also sets the absolute path to the WordPress
            │           directory and includes the necessary files for
            │           WordPress setup.
            ├── Dockerfile
            │       This Dockerfile sets up a WordPress environment with PHP-FPM
            │       and MariaDB client. It installs necessary packages, downloads
            │       WP-CLI for managing WordPress installations, configures
            │       PHP-FPM to listen on port 9000, copies the setup_wordpress.sh
            │       script for WordPress setup, exposes port 9000, and sets the
            │       entrypoint to run the setup_wordpress.sh script.
            └── tools
                └── setup_wordpress.sh
                        This Bash script sets up WordPress by creating a
                        directory for it, checking if the wp-config.php
                        file exists, downloading the WordPress core,
                        creating the wp-config.php file with database
                        and configuration details, installing WordPress,
                        creating a second user, changing ownership of the
                        WordPress directory, and starting WordPress using
                        php-fpm7.3.

# Container purposes
MariaDB:
Open-source database system. High-performance, scalable, and reliable.
Used for web applications and data-driven applications.

WordPress:
Content management system (CMS). PHP-based. Uses MySQL/MariaDB for data storage.
User-friendly, customizable, widely used for website development and blogging.

Nginx:
Web server software. High-performance, lightweight, and scalable.
Handles HTTP requests, serves web content efficiently.

Q: How does Docker work?
A: 
Docker is like a container for your application. This container contains
everything your application needs to run in a single, self-contained object
called a Docker image.

# Evaluation Q and A
Q: How does Docker Compose work?
A:
It is a tool that helps you define and manage multi-container Docker applications.
Docker Compose makes it easy to setup multiple containers and specify their
configurations and communication between them.

Q:
What is the difference between a Docker image with and without Docker Compose?
Without Docker Compose, you work with individual Docker commands to build/run/manage
containers. You manually specify their configurations, network, and other settings.

With Docker Compose, you have a higher level of abstraction for building/running/managing
containers. You define the configurations, network, and other settings in a YAML file.
With this, you can start/stop/manage the entire application with a single command.

Q:
What is the benefit of Docker compared to VMs?
1. EFFICIENCY w.r.t. resources. When you run multiple Docker containers for a
single application, all containers share the same host operating system. This
reduces overhead. This allows you to deploy applications with multiple services
in an efficient manner.
2. FAST STARTUP. The containers only include the necessary dependencies and
libraries for the specific service they are running.
3. ISOLATION. Changes in one container do not affect other containers.
Docker images are created from a Dockerfile, which allows for easy reproduction
over different environments.

Q: Pertinence of the directory structure required for the project
A:
The directory structure is pertinent because it follows some conventions for
Docker projects. It separates the code into a dedicated directory and provides a
specific location for Docker related files. It promotes modularity and makes it
easy to manage the project.

# Docker network
A Docker network allows containers within the Docker environment to communicate
with each other and with the external world. When you run multiple containers,
they can be connected together within a virtual network created by Docker.

Docker provides different types of networks, such as bridge networks.
Bridge networks are the default type and are suitable for single-host envs.

# NGINX with SSL/TLS
Nginx can be configured to support SSL/TLS encryption. This allows for secure
HTTPS connections. Now the web server can encrypt the data transmitted between
the client's browser and the server.

TLS certificates are used to encrypt communication between a client (e.g. web browser)
and a server. These certificates verify the authenticity and identity of the server,
ensuring secure communication and protecting sensitive data.

TLS certificates are issued by Certificate Authorities (CAs) and contain
cryptographic keys that enable encryption/decryption of data transmitted over a 
network.

# How to login into the database
docker exec -it mariadb bash
mysql -u root -p wordpress
SHOW TABLES;